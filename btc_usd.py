# -*- coding: utf-8 -*-
"""BTC-USD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NOTQeTtPgE_WXMHDEXOiqVVpJAfmudQp

**Step 1: Install Required Packages**
"""

!pip install pandas numpy matplotlib tensorflow sklearn

"""**Step 2: Import Required Packages**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

"""**Step 3: Load the Data**"""

df = pd.read_csv('BTC-USD.csv')

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/MyDrive/BTC-USD.csv"
df = pd.read_csv(path)

df.head()

"""**Step 4: Preprocess the Data**"""

# Filter only the relevant columns
df = df[['Date', 'Close']]
# Convert the 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])
# Set the 'Date' column as the index
df.set_index('Date', inplace=True)
# Scale the data
scaler = MinMaxScaler()
df = pd.DataFrame(scaler.fit_transform(df), columns=df.columns, index=df.index)

"""**Step 5: Split the Data into Training and Testing Sets**"""

# Split the data into training and testing sets
train_size = int(len(df) * 0.8)
test_size = len(df) - train_size
train_data, test_data = df.iloc[0:train_size,:], df.iloc[train_size:len(df),:]

"""**Step 6: Prepare the Data for LSTM Model**"""

def create_dataset(X, y, time_steps=1):
    Xs, ys = [], []
    for i in range(len(X) - time_steps):
        v = X.iloc[i:(i + time_steps)].values
        Xs.append(v)        
        ys.append(y.iloc[i + time_steps])
    return np.array(Xs), np.array(ys)

time_steps = 30
X_train, y_train = create_dataset(train_data, train_data.Close, time_steps)
X_test, y_test = create_dataset(test_data, test_data.Close, time_steps)

"""**Step 7: Build the LSTM Model**"""

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

"""**Step 8: Train the LSTM Model**"""

history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.1, shuffle=False)

"""**Step 9: Make Predictions on Test Data and Evaluate the Model**"""

# Make predictions on test data
y_pred = model.predict(X_test)

# Inverse transform the predictions and actual values
y_pred = scaler.inverse_transform(y_pred)
y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

# Calculate the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((y_pred - y_test) ** 2)))
print('RMSE:', rmse)

# Plot the predicted and actual values
plt.plot(y_test, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.show()